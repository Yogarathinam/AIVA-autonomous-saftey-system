#include <M5Stack.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

// --- Pins ---
#define SS_PIN 21
#define RST_PIN 22
#define TRIG_PIN 26
#define ECHO_PIN 36
#define SERVO_PIN 2

MFRC522 mfrc522(SS_PIN, RST_PIN);
Servo myServo;

String lastUID = "";
bool waitForResponse = false;
unsigned long servoTimer = 0;
bool servoOpen = false;

void setup() {
  M5.begin();
  Serial.begin(115200);
  SPI.begin(18, 19, 23, 21); // SCK, MISO, MOSI, SS
  mfrc522.PCD_Init();

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  myServo.attach(SERVO_PIN);
  myServo.write(0); // initial position
  Serial.println("M5Stack ready");
}

void loop() {
  // --- 1️⃣ Check RFID ---
  if (!waitForResponse && mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    lastUID = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      lastUID += String(mfrc522.uid.uidByte[i], HEX);
    }
    lastUID.toUpperCase();
    Serial.println("RFID:" + lastUID); // send to webpage
    waitForResponse = true;
  }

  // --- 2️⃣ Check Serial response from webpage ---
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();
    if (cmd.equalsIgnoreCase("OK") && waitForResponse) {
      myServo.write(90);
      servoOpen = true;
      servoTimer = millis();
      waitForResponse = false;
      Serial.println("Servo opened for RFID: " + lastUID);
    }
    else if (cmd.equalsIgnoreCase("DENY")) {
      waitForResponse = false; // ignore
    }
  }

  // --- 3️⃣ Close servo after 30 seconds ---
  if (servoOpen && millis() - servoTimer >= 30000) {
    myServo.write(0);
    servoOpen = false;
    Serial.println("Servo closed");
  }

  // --- 4️⃣ Send ultrasonic distance ---
  float distance = readDistance();
  if (distance > 0) {
    Serial.println("DIST:" + String(distance, 1)); // send with 1 decimal
  }

  delay(200); // small loop delay
}

// --- Helper: read HC-SR04 distance ---
float readDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH, 30000); // timeout ~30ms
  if (duration == 0) return -1; // timeout
  float distance = duration * 0.034 / 2;
  return distance;
}
